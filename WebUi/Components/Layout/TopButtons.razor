@inject IUserService UserService
@inject UserTokenService UserTokenService

@inject NavigationManager NavigationManager

<a class="btn btn-outline-dark" href="https://github.com/je-sendra/Charwiki">
    <i class="bi bi-github"></i>
</a>

<a class="btn btn-outline-primary" href="https://discord.gg/4wBJxPtCyJ">
    <i class="bi bi-discord"></i>
    <span>Join</span>
</a>

@if (_isAuthenticated)
{
    @if (_user != null)
    {
        <span class="ms-2">@_user.Username</span>
    }

    <a class="btn btn-outline-danger" @onclick="HandleLogoutAsync">
        <i class="bi bi-box-arrow-right"></i>
        <span>Logout</span>
    </a>
}
else
{
    <a class="btn btn-outline-success" href="login">
        <i class="bi bi-person"></i>
        <span>Access</span>
    </a>
}

@code {

    private bool _isAuthenticated;
    private User? _user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isAuthenticated = await UserTokenService.IsAuthenticatedAsync();

            if (_isAuthenticated)
            {
                string? token = await UserTokenService.GetAuthTokenAsync();

                try
                {
                    _user = await UserService.GetMeAsync(token!);
                }
                catch
                {
                    // Ignore
                }
            }

            StateHasChanged();
        }
    }

    private async Task HandleLogoutAsync()
    {
        await UserTokenService.RemoveAuthTokenAsync();
        _isAuthenticated = false;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}